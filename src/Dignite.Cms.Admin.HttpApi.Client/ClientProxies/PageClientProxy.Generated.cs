// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Dignite.Cms.Admin.Pages;
using Dignite.Cms.Pages;

// ReSharper disable once CheckNamespace
namespace Dignite.Cms.Admin.Pages.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IPageAppService), typeof(PageClientProxy))]
public partial class PageClientProxy : ClientProxyBase<IPageAppService>, IPageAppService
{
    public virtual async Task<PageDto> GetAsync(Guid id)
    {
        return await RequestAsync<PageDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<PageDto>> GetAllListAsync()
    {
        return await RequestAsync<ListResultDto<PageDto>>(nameof(GetAllListAsync));
    }

    public virtual async Task<PagedResultDto<PageDto>> GetListAsync(GetPagesInput input)
    {
        return await RequestAsync<PagedResultDto<PageDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetPagesInput), input }
        });
    }

    public virtual async Task<PageDto> CreateAsync(PageCreateDto edit)
    {
        return await RequestAsync<PageDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PageCreateDto), edit }
        });
    }

    public virtual async Task<PageDto> UpdateAsync(Guid id, PageUpdateDto edit)
    {
        return await RequestAsync<PageDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PageUpdateDto), edit }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task MoveAsync(Guid id, MovePageInput input)
    {
        await RequestAsync(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(MovePageInput), input }
        });
    }
}
