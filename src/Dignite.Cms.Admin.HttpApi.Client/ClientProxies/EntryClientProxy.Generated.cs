// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Dignite.Cms.Admin.Entries;
using Dignite.Cms.Entries;

// ReSharper disable once CheckNamespace
namespace Dignite.Cms.Admin.Entries.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IEntryAppService), typeof(EntryClientProxy))]
public partial class EntryClientProxy : ClientProxyBase<IEntryAppService>, IEntryAppService
{
    public virtual async Task<NewEntryOutput> NewAsync(Guid sectionId)
    {
        return await RequestAsync<NewEntryOutput>(nameof(NewAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), sectionId }
        });
    }

    public virtual async Task<EditEntryOutput> EditAsync(Guid id)
    {
        return await RequestAsync<EditEntryOutput>(nameof(EditAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<EntryDto> CreateAsync(EntryCreateDto input)
    {
        return await RequestAsync<EntryDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EntryCreateDto), input }
        });
    }

    public virtual async Task<EntryDto> UpdateAsync(Guid id, EntryUpdateDto input)
    {
        return await RequestAsync<EntryDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(EntryUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<EntryDto>> GetListAsync(GetEntriesInput input)
    {
        return await RequestAsync<PagedResultDto<EntryDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEntriesInput), input }
        });
    }

    public virtual async Task<EntryDto> GetAsync(Guid id)
    {
        return await RequestAsync<EntryDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<EntryDto>> GetFieldSourceAsync(GetEntryChoiceFieldSourceInput input)
    {
        return await RequestAsync<PagedResultDto<EntryDto>>(nameof(GetFieldSourceAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEntryChoiceFieldSourceInput), input }
        });
    }

    public virtual async Task MoveAsync(MoveEntriesInput input)
    {
        await RequestAsync(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MoveEntriesInput), input }
        });
    }

    public virtual async Task AuditAsync(AuditEntriesInput input)
    {
        await RequestAsync(nameof(AuditAsync), new ClientProxyRequestTypeValue
        {
            { typeof(AuditEntriesInput), input }
        });
    }
}
