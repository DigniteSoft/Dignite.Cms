// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Dignite.SiteBuilding.Admin.Sections;
using Dignite.SiteBuilding.Sections;

// ReSharper disable once CheckNamespace
namespace Dignite.SiteBuilding.Admin.Sections.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ISectionAppService), typeof(SectionClientProxy))]
public partial class SectionClientProxy : ClientProxyBase<ISectionAppService>, ISectionAppService
{
    public virtual async Task<SectionEditOutput> NewAsync()
    {
        return await RequestAsync<SectionEditOutput>(nameof(NewAsync));
    }

    public virtual async Task<SectionEditOutput> EditAsync(Guid id)
    {
        return await RequestAsync<SectionEditOutput>(nameof(EditAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task CreateAsync(SectionEditDto input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SectionEditDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, SectionEditDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(SectionEditDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<SectionDto>> GetListAsync(GetSectionsInput input)
    {
        return await RequestAsync<PagedResultDto<SectionDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetSectionsInput), input }
        });
    }

    public virtual async Task<SectionDto> GetAsync(Guid id)
    {
        return await RequestAsync<SectionDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task AddAuthorizerAsync(Guid id, AuthorizerEditInput input)
    {
        await RequestAsync(nameof(AddAuthorizerAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(AuthorizerEditInput), input }
        });
    }

    public virtual async Task UpdateAuthorizerAsync(Guid id, AuthorizerEditInput input)
    {
        await RequestAsync(nameof(UpdateAuthorizerAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(AuthorizerEditInput), input }
        });
    }

    public virtual async Task RemoveAuthorizerAsync(Guid id, Guid userId)
    {
        await RequestAsync(nameof(RemoveAuthorizerAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid), userId }
        });
    }

    public virtual async Task<ListResultDto<SectionAuthorizerDto>> GetAuthorizersAsync(Guid id)
    {
        return await RequestAsync<ListResultDto<SectionAuthorizerDto>>(nameof(GetAuthorizersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
